# price_checker.py
import aiohttp
import asyncio
import json
import os
from datetime import datetime
from typing import Optional, Dict

from aiogram import Bot
from config import (
    COIN_ID, PRICE_CHANGE_THRESHOLD, CHECK_INTERVAL,
    GROUP_CHAT_ID, UP_IMAGE, DOWN_IMAGE
)

PRICE_FILE = "last_price.json"
CURRENCIES = ["usd", "rub", "uah"]  # –ø–æ—Ä—è–¥–æ–∫: USD, RUB, UAH


def load_last_price() -> Optional[Dict[str, float]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏–∑ —Ñ–∞–π–ª–∞ (–∏–ª–∏ None)."""
    if not os.path.exists(PRICE_FILE):
        return None
    try:
        with open(PRICE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –ü—Ä–∏–≤–µ–¥—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ float –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        return {k: float(v) for k, v in data.items()}
    except Exception:
        return None


def save_last_price(price: Dict[str, float]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ —Ñ–∞–π–ª (—Ç–∏—Ö–æ, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π)."""
    with open(PRICE_FILE, "w", encoding="utf-8") as f:
        json.dump(price, f)


async def fetch_current_prices() -> Optional[Dict[str, float]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ CoinGecko /simple/price.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'usd': float, 'rub': float, 'uah': float} –∏–ª–∏ None.
    """
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": COIN_ID, "vs_currencies": ",".join(CURRENCIES)}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
                coin = data.get(COIN_ID, {})
                # –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                if not all(c in coin for c in CURRENCIES):
                    return None
                return {c: float(coin[c]) for c in CURRENCIES}
    except Exception:
        return None


async def check_price_and_notify(bot: Bot):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É, –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—É—é, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç.
    –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Ä–æ–≥ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GROUP_CHAT_ID —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.
    –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ü–µ (—á—Ç–æ–±—ã –ø–æ–º–Ω–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ).
    """
    last = load_last_price()
    current = await fetch_current_prices()
    if current is None:
        # API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø—Ä–æ—à–ª–æ–π —Ü–µ–Ω—ã ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ —É–π–¥—ë–º
    if not last:
        save_last_price(current)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    changes = {}
    for c in CURRENCIES:
        old = last.get(c)
        new = current.get(c)
        if old is None or old == 0:
            continue
        pct = ((new - old) / old) * 100
        changes[c] = pct

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø–æ—Ä–æ–≥
    triggers = {c: pct for c, pct in changes.items() if abs(pct) >= PRICE_CHANGE_THRESHOLD}

    if not triggers:
        # –ù–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
        save_last_price(current)
        return

    # –í—ã–±–µ—Ä–µ–º –≤–∞–ª—é—Ç—É —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (up/down)
    trigger_currency = max(triggers.keys(), key=lambda k: abs(triggers[k]))
    trigger_percent = triggers[trigger_currency]

    # –í—ã–±–µ—Ä–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–Ω–∞–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
    img_path = UP_IMAGE if trigger_percent > 0 else DOWN_IMAGE

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ 3 –≤–∞–ª—é—Ç—ã (—Å—Ç–∞—Ä–æ–µ -> –Ω–æ–≤–æ–µ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç)
    lines = []
    emoji_map = {"usd": "üá∫üá∏", "rub": "üá∑üá∫", "uah": "üá∫üá¶"}
    for c in CURRENCIES:
        old = last.get(c)
        new = current.get(c)
        if old is None:
            line = f"{emoji_map.get(c,'')} {c.upper()}: ‚Äî ‚Üí {new:.6f}"
        else:
            pct = ((new - old) / old) * 100 if old != 0 else 0.0
            sign = "+" if pct > 0 else ""
            line = f"{emoji_map.get(c,'')} {c.upper()}: {old:.6f} ‚Üí {new:.6f} ({sign}{pct:.2f}%)"
        lines.append(line)

    caption = (
        f"{'üìà –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞!' if trigger_percent > 0 else 'üìâ –¶–µ–Ω–∞ —É–ø–∞–ª–∞!'}\n\n"
        + "\n".join(lines)
        + f"\n\nüìÖ {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if os.path.exists(img_path):
            with open(img_path, "rb") as ph:
                await bot.send_photo(chat_id=GROUP_CHAT_ID, photo=ph, caption=caption)
        else:
            await bot.send_message(chat_id=GROUP_CHAT_ID, text=caption)
    except Exception:
        # –ù–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≥—Ä—É–ø–ø–∞):", exc_info=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ)
    save_last_price(current)


# –ù–µ–±–æ–ª—å—à–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ bot.py)
async def price_monitor_loop(bot: Bot):
    while True:
        try:
            await check_price_and_notify(bot)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ price_monitor_loop:", e)
        await asyncio.sleep(CHECK_INTERVAL)
