# handlers.py
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from config import CHAT_LINK, PRIVATE_MESSAGE_TEXT, GROUP_CHAT_ID
from price_checker import fetch_current_prices, CURRENCIES
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


async def price_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –º–æ–Ω–µ—Ç—ã.
    """
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ price_command_handler –≤—ã–∑–≤–∞–Ω")
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –∏–∑ —á–∞—Ç–∞ %s (%s) –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å",
                 message.from_user.username, message.from_user.id,
                 message.chat.title, message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    current = await fetch_current_prices()
    
    if current is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (%s) –∏–∑ —á–∞—Ç–∞ %s (%s)",
                         message.from_user.username, message.from_user.id,
                         message.chat.title, message.chat.id)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏
    lines = []
    emoji_map = {"usd": "üá∫üá∏", "rub": "üá∑üá∫", "uah": "üá∫üá¶"}
    for c in CURRENCIES:
        price = current.get(c)
        if price is not None:
            line = f"{emoji_map.get(c,'')} {c.upper()}: {price:.6f}"
        else:
            line = f"{emoji_map.get(c,'')} {c.upper()}: ‚Äî"
        lines.append(line)
    
    caption = (
        "üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å\n\n"
        + "\n".join(lines)
        + f"\n\nüìÖ {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}"
    )
    
    await message.answer(caption)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (%s) –∏–∑ —á–∞—Ç–∞ %s (%s)",
                 message.from_user.username, message.from_user.id,
                 message.chat.title, message.chat.id)



# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã
async def private_message_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.
    """
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ private_message_handler –≤—ã–∑–≤–∞–Ω")
    if message.chat.type != "private":
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return

    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (%s)",
                 message.from_user.username, message.from_user.id)

    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=CHAT_LINK)

    await message.answer(
        PRIVATE_MESSAGE_TEXT,
        reply_markup=kb.as_markup()
    )
    logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (%s)",
                 message.from_user.username, message.from_user.id)

