# handlers.py
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from config import CHAT_LINK, PRIVATE_MESSAGE_TEXT, GROUP_CHAT_ID
from price_checker import fetch_current_prices, CURRENCIES
from settings import load_settings, save_settings, is_admin, add_admin, remove_admin, add_group, remove_group, load_groups
from datetime import datetime
import logging
import random

# –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /price
PRICE_RESPONSE_TEMPLATES = [
    """–ê—Ö, –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ó–æ–ª–æ—Ç–æ –º–µ—Ä–∫–Ω–µ—Ç –ø–µ—Ä–µ–¥ —Ç–æ—á–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏. –ó–∞–ø–æ–º–Ω–∏—Ç–µ:  
{currency_lines}
–¢–µ–ø–µ—Ä—å –∏–¥–∏—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö —Å —É–º–æ–º‚Ä¶ –≤–æ –±–ª–∞–≥–æ –º–æ–µ–π –∫–∞–∑–Ω—ã.""",

    """–ü—Ä–æ—Å—Ç–æ–ª—é–¥–∏–Ω—ã, –≤–Ω–∏–º–∞–π—Ç–µ! –°–µ–≥–æ–¥–Ω—è –º–æ–∏ –∫–∞–∑–Ω–∞—á–µ–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Ä—Å—ã:  
{currency_lines}
–õ—é–±–∞—è –ø—Ä–∏–±—ã–ª—å —Å –æ–±–º–µ–Ω–∞ ‚Äî –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫—É—é –∫–∞–∑–Ω—É, —Ä–∞–∑—É–º–µ–µ—Ç—Å—è.""",

    """–ó–∞–ø–∏—à–∏—Ç–µ, –∫—Ä–µ—Å—Ç—å—è–Ω–µ, –¥–∞–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –º–æ—ë –≤—Ä–µ–º—è –Ω–∞ —Ä–∞—Å—Å–ø—Ä–æ—Å—ã:  
{currency_lines}
–ò –ø–æ–º–Ω–∏—Ç–µ ‚Äî –≤–∞—à–∏ –º–æ–Ω–µ—Ç—ã —É–∂–µ –º—ã—Å–ª–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –º–Ω–µ.""",

    """–ö–∞–∑–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏! –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∫—É—Ä—Å—ã:  
{currency_lines}
–õ—é–±–∞—è –≤—ã–≥–æ–¥–∞ —Å –æ–±–º–µ–Ω–∞ ‚Äî –º–æ—è. –î–∞–∂–µ –Ω–µ –¥—É–º–∞–π—Ç–µ –∏–Ω–∞—á–µ."""
]
# –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
PRIVATE_MESSAGE_RESPONSE_TEMPLATES = [
    """üö´ –°–µ–≥–æ–¥–Ω—è —è –Ω–µ –Ω–∞–º–µ—Ä–µ–Ω —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–ª—é–¥–∏–Ω–æ–≤!  
üëâ –•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å ‚Äî –ø–∏—à–∏ –≤ —á–∞—Ç: _–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç_""",

    """üö´ –ú–æ—ë –≤—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º —Ü–µ–Ω–Ω–æ –¥–ª—è –±–µ—Å–µ–¥ —Å —Ñ–µ—Ä–º–µ—Ä–∞–º–∏!  
üëâ –ï—Å–ª–∏ —É–∂ –Ω–∞—Å—Ç–∞–∏–≤–∞–µ—à—å ‚Äî –ø–∏—à–∏ –≤ —á–∞—Ç: _–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç_""",

    """üö´ –Ø –Ω–µ –≤–∏–∂—É –ø—Ä–∏—á–∏–Ω —Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ—ë –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–∞—Å.  
üëâ –û—Å—Ç–∞–≤—å —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ –∑–¥–µ—Å—å: _–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç_""",

    """üö´ –£ –º–µ–Ω—è –Ω–µ—Ç –Ω–∏ –∂–µ–ª–∞–Ω–∏—è, –Ω–∏ —Ç–µ—Ä–ø–µ–Ω–∏—è –æ–±—â–∞—Ç—å—Å—è —Å –∫—Ä–µ—Å—Ç—å—è–Ω–∞–º–∏.  
üëâ –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ, –∏–∑–ª–æ–∂–∏ –≤ —á–∞—Ç–µ: _–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç_"""
]

logger = logging.getLogger(__name__)


async def price_command_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –º–æ–Ω–µ—Ç—ã.
    """
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ price_command_handler –≤—ã–∑–≤–∞–Ω")
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –∏–∑ —á–∞—Ç–∞ %s (%s) –∑–∞–ø—Ä–æ—Å–∏–ª –∫—É—Ä—Å",
                 message.from_user.username, message.from_user.id,
                 message.chat.title, message.chat.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    current = await fetch_current_prices()
    
    if current is None:
        # –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
        PRICE_ERROR_TEMPLATES = [
            "‚ùå –î–∞–∂–µ –º–æ–∏ –∫–∞–∑–Ω–∞—á–µ–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –¥–æ–±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—É—Ç –±–µ–∑–¥–µ–ª—å–Ω–∏—á–∞—Ç—å.",
            "‚ùå –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∏–¥–∏–º–æ, –≤–∞—à–∏ –∂–∞–ª–∫–∏–µ —Ä—ã–Ω–∫–∏ —Å–µ–≥–æ–¥–Ω—è —Å–ø—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å. –ú–æ—ë —Ç–µ—Ä–ø–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, —Ç–∞–∫ —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
        ]
        await message.answer(random.choice(PRICE_ERROR_TEMPLATES))
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (%s) –∏–∑ —á–∞—Ç–∞ %s (%s)",
                         message.from_user.username, message.from_user.id,
                         message.chat.title, message.chat.id)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫—É—Ä—Å–∞–º–∏ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
    lines = []
    emoji_map = {"usd": ""}
    for c in CURRENCIES:
        price = current.get(c)
        if price is not None:
            line = f"{c.upper()}: {price:.4f}"
        else:
            line = f"{c.upper()}: ‚Äî"
        lines.append(line)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ –∫—É—Ä—Å—ã
    template = random.choice(PRICE_RESPONSE_TEMPLATES)
    currency_lines = "\n".join(lines)
    caption = template.format(currency_lines=currency_lines)
    
    await message.answer(caption)
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (%s) –∏–∑ —á–∞—Ç–∞ %s (%s)",
                 message.from_user.username, message.from_user.id,
                 message.chat.title, message.chat.id)


# –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã
async def private_message_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.
    """
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ private_message_handler –≤—ã–∑–≤–∞–Ω")
    logger.info("–¢–∏–ø —á–∞—Ç–∞: %s, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: %s", message.chat.type, message.text)
    if message.chat.type != "private":
        logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return

    logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (%s)",
                 message.from_user.username, message.from_user.id)

    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", url=CHAT_LINK)

    await message.answer(
        random.choice(PRIVATE_MESSAGE_RESPONSE_TEMPLATES),
        reply_markup=kb.as_markup()
    )
async def set_threshold_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_threshold –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_threshold <–∑–Ω–∞—á–µ–Ω–∏–µ>")
        return
    
    try:
        new_threshold = float(args[1])
        if new_threshold <= 0:
            await message.answer("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings = load_settings()
    if not settings:
        settings = {"price_change_threshold": 15.0, "check_interval": 60}
    
    settings["price_change_threshold"] = new_threshold
    save_settings(settings)
    
    await message.answer(f"‚úÖ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_threshold}%")


async def add_group_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_group –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_group <id> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    
    try:
        group_id = int(args[1])
        group_name = args[2]
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if add_group(group_id, group_name):
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")


async def remove_group_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_group –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_group <id>")
        return
    
    try:
        group_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã")
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    groups = load_groups()
    if not groups or "group_chats" not in groups:
        await message.answer("‚ùå –§–∞–π–ª –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    group_name = None
    for group in groups["group_chats"]:
        if group["id"] == group_id:
            group_name = group["name"]
            break
    
    if remove_group(group_id):
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É–¥–∞–ª–µ–Ω–∞")
    else:
        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


async def list_groups_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_groups –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # if not is_admin(message.from_user.id):
    #     await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    #     return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –≥—Ä—É–ø–ø
    groups = load_groups()
    if not groups or "group_chats" not in groups:
        await message.answer("‚ùå –§–∞–π–ª –≥—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    if not groups["group_chats"]:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç")
        return
    
    lines = ["üìù –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø:"]
    for group in groups["group_chats"]:
        lines.append(f"  ‚Ä¢ {group['name']} (ID: {group['id']})")
    
    await message.answer("\n".join(lines))


async def add_admin_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_admin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <id>")
        return
    
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if add_admin(user_id):
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)")


async def remove_admin_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_admin –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin <id>")
        return
    
    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if remove_admin(user_id):
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (%s)",
                 message.from_user.username, message.from_user.id)
